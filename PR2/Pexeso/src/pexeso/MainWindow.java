/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on May 11, 2011, 1:53:49 PM
 */

package pexeso;

import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.UIManager;

/**
 *
 * @author michal
 */
public class MainWindow extends javax.swing.JFrame {

	/** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception ex) {
		}

		loadGame.setEnabled(
			new File("/tmp/pexeso").exists()
		);
    }

	void newGame() {
		tiles.newGame();
		results.newGame();
		repeatGame.setEnabled(false);
		showTiles.setEnabled(true);
		saveGame.setEnabled(true);
		pause.setEnabled(true);
	}

	void repeatGame() {
		tiles.repeatGame();
		results.repeatGame();
		showTiles.setEnabled(true);
		saveGame.setEnabled(true);
		pause.setEnabled(true);
	}

	void pauseGame() {
		tiles.pauseGame();
		results.pauseGame();
	}

	void resumeGame() {
		tiles.resumeGame();
		results.resumeGame();
	}

	void showTiles() {
		tiles.showTiles();
	}

	void setPairsFound(int human, int comp) {
		results.pairFound(human, comp);
	}

	void gameOver(int human, int comp) {
		results.gameOver(human, comp);
		saveGame.setEnabled(false);
		repeatGame.setEnabled(true);
		showTiles.setEnabled(false);
		pause.setEnabled(false);
	}

	void saveGame(String file) {
		FileOutputStream f = null;
		ObjectOutputStream s = null;
		try {
			f = new FileOutputStream("/tmp/"+file);
			s = new ObjectOutputStream(f);
			Save save = new Save();
			save.tilesIds = new Integer[tiles.getComponentCount()];
			save.tilesDone = new Boolean[tiles.getComponentCount()];
			Component c[] = tiles.getComponents();
			for(int i = 0; i < c.length; i++) {
				Tile tile = (Tile) c[i];
				save.tilesIds[i] = tile.getId();
				save.tilesDone[i] = tile.isDone();
			}
			save.rows = tiles.getTileRows();
			save.cols = tiles.getTileCols();
			save.theme = tiles.getTheme();
			save.pairsFound = tiles.pairsFound;
			save.computerPairsFound = tiles.computerPairsFound;
			save.compDifficulty = tiles.getCompDifficulty();
			s.writeObject(save);
			s.flush();
			loadGame.setEnabled(true);
		} catch(IOException e) {
			System.err.println("Could not save the game");
			System.err.println(e);
		} finally {
			try {
				if(f != null) {
					f.close();
				}
				if(s != null) {
					s.close();
				}
			} catch(IOException e) {}
		}
	}

	void loadGame(String file) {
		FileInputStream in = null;
		ObjectInputStream s = null;
		try {
			in = new FileInputStream("/tmp/"+file);
			s = new ObjectInputStream(in);
			Save save = (Save) s.readObject();
			tiles.setTileSize(save.rows, save.cols);
			tiles.setTheme(save.theme);
			tiles.setCompDifficulty(save.compDifficulty);
			tiles.pairsFound = save.pairsFound;
			tiles.computerPairsFound = save.computerPairsFound;
			for(int i = 0; i < save.tilesIds.length; i++) {
				Tile tile = (Tile) tiles.getComponent(i);
				tile.setId(save.tilesIds[i]);
				tile.setDone(save.tilesDone[i]);
			}

		} catch(Exception e ) {
			System.err.println("Could not load the game");
			System.err.println(e);
		} finally {
			try {
				if(in != null) {
					in.close();
				}
				if(s != null) {
					s.close();
				}
			} catch(IOException e) {}
		}
	}





    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        wrapper = new javax.swing.JPanel();
        results = new ResultsPanel();
        tiles = new TileMap(this);
		center = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        pause = new javax.swing.JMenuItem();
		saveGame = new javax.swing.JMenuItem();
        loadGame = new javax.swing.JMenuItem();
		repeatGame = new javax.swing.JMenuItem();
		showTiles = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
		jSeparator2 = new javax.swing.JPopupMenu.Separator();
        settings = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pexeso");
		setResizable(false);

        wrapper.setLayout(new java.awt.BorderLayout());

		center.add(tiles);
        wrapper.add(results, java.awt.BorderLayout.SOUTH);

        wrapper.add(center, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Hra");

        newGame.setText("Nová hra");
		newGame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				newGame();
			}
		});
        jMenu1.add(newGame);

		repeatGame.setText("Zopakovať hru");
		repeatGame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				repeatGame();
			}
		});
        jMenu1.add(repeatGame);

		showTiles.setText("Ukázať karty");
		showTiles.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				showTiles();
			}
		});
        jMenu1.add(showTiles);


		pause.setText("Pauza");
		pause.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(pause.getText() == "Pauza") {
					pauseGame();
					pause.setText("Pokračovať");
				} else {
					resumeGame();
					pause.setText("Pauza");
				}
			}
		});
        jMenu1.add(pause);
        jMenu1.add(jSeparator1);



		saveGame.setText("Uložiť hru");
		saveGame.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				saveGame("pexeso");
			}
		});
        jMenu1.add(saveGame);


		loadGame.setText("Načítať hru");
		loadGame.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				loadGame("pexeso");
			}
		});
        jMenu1.add(loadGame);

		jMenu1.add(jSeparator2);
        settings.setText("Nastavenia");
		settings.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				new SettingsWindow().setVisible(true);
			}
		});
        jMenu1.add(settings);



        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wrapper, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wrapper, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );

		;
		Image img = Toolkit.getDefaultToolkit().createImage( "/usr/lib/pexeso/pexeso.png");
		setIconImage( img );

        pack();

    }// </editor-fold>


	public TileMap getTiles() {
		return tiles;
	}

	


	private static MainWindow instance;
    public static MainWindow getInstance() {
		return instance;
	}

	
	/**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                instance = new MainWindow();
				instance.newGame();
				instance.pack();
				instance.setLocationRelativeTo(instance);

				instance.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem settings;
    private javax.swing.JMenuItem newGame;
    private javax.swing.JMenuItem pause;
	private javax.swing.JMenuItem saveGame;
    private javax.swing.JMenuItem loadGame;
	private javax.swing.JMenuItem repeatGame;
	private javax.swing.JMenuItem showTiles;
    private javax.swing.JPopupMenu.Separator jSeparator1;
	private javax.swing.JPopupMenu.Separator jSeparator2;
    private ResultsPanel results;
	private javax.swing.JPanel center;
    private TileMap tiles;
    private javax.swing.JPanel wrapper;
    // End of variables declaration



}
