%% Show data
load data.mat;
figure, hold on;
X1=X(:,y==1);  % class +1
X2=X(:,y==-1); % class -1
plot(X1(1,:), X1(2,:),'ro');
plot(X2(1,:), X2(2,:),'bo');

%% Perceptron implementation

X=[X; ones(1, size(X,2))];

w = [0.5; 0.5; 0.5]; 
for iteration = 1 : 100  %<- in practice, use some stopping criterion!
  while sum(sign(w'*X)~=y)/size(X,2)   %show misclassification rate
    for ii = 1 : size(X,2)         %cycle through training set
    if sign(w'*X(:,ii)) ~= y(ii) %wrong decision?
      w = w + X(:,ii) * y(ii);   %then add (or subtract) this point to w
      
      h=pline(w(1:2), w(3));
      pause(0.5);
      set(h,'visible','off');
      
    end
  end
  
end

h=pline(w(1:2), w(3));

% % initialize values
% w_init=[0.5; 0.5; 0.5]; 
% z=[X; ones(1, size(X,2))];
% 
% i = 1;
% while i < 10
%     % are all elements properly classfied?
%     classification = v'*z >= 0;
%     error = find(y-classification ~= 0);
%     if(length(error) == 0)
%         break;
%     end
%     
%     v(1:2) = v(1:2) + z(1:2, error(1));
%     
%     h=pline(v(1:2), v(3));
%     pause(0.1);
%     set(h,'visible','off');
%     i = i+1;
%     display(i);
%     display(v);
% end



